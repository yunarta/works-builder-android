apply plugin: 'com.android.library'
apply plugin: 'signing'
apply plugin: 'maven'

group 'com.mobilesolutionworks'
version '1.0.2'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 1
        versionName "1.0.2"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    //    provided fileTree(dir: 'libs', include: ['*.jar'])
    provided files('libs/baseLibrary-1.0-rc1.jar')
    provided files('libs/databinding-library-1.0-rc1.jar')
    provided files('libs/databinding-adapters-1.0-rc1.jar')
    provided files('libs/android-support-v13.jar')
    provided files('libs/android-support-v7-recyclerview.jar')
    provided 'com.android.support:support-annotations:22.2.1'
}

apply from: 'https://raw.githubusercontent.com/yunarta/works-gradle-script/master/publish-works.gradle'
worksPublish {
    bintray {
        repo = 'snapshot'
        name = group + ':' + project.name
    }

    developer {
        id = 'yunarta'
        name = 'Yunarta Kartawahyudi'
        email = 'yunarta.kartawahyudi@gmail.com'
    }

    siteUrl = 'https://github.com/yunarta/works-builder-android'
    gitUrl = 'https://github.com/yunarta/works-builder-android.git'
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    publish = worksPublish.bintray.publish

    pkg {
        repo = worksPublish.bintray.repo
        name = worksPublish.bintray.name

        userOrg = user

        websiteUrl = worksPublish.siteUrl
        vcsUrl = worksPublish.gitUrl
        licenses = [worksPublish.bintray.license]
        publish = worksPublish.bintray.publish
        publicDownloadNumbers = true

        version {
            name = project.version
            desc = worksPublish.bintray.versionDesc
            vcsTag = project.version
        }
    }
}

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name project.name
                url worksPublish.siteUrl

                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id worksPublish.developer.id
                        name worksPublish.developer.name
                        email worksPublish.developer.email
                    }
                }
                scm {
                    connection worksPublish.gitUrl
                    developerConnection worksPublish.gitUrl
                    url worksPublish.siteUrl

                }
            }
        }
    }
}

tasks.maybeCreate('jar', Jar.class).configure {
    from 'build/intermediates/classes/release'
}

tasks.maybeCreate('sourcesJar', Jar.class).configure {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

tasks.maybeCreate('javadoc', Javadoc.class).configure {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

tasks.maybeCreate('javadocJar', Jar.class).dependsOn(javadoc).configure {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
//    archives javadocJar
//    archives sourcesJar
//    archives jar
}

//def generatePom() {
//    def pom = pom {
//        project {
//            name 'works-builder'
//            packaging 'aar'
//            groupId project.group
//            artifactId project.name
//            version project.version
//            description 'Works Builder for Android'
//            inceptionYear '2015'
//            url 'http://sg.linkedin.com/in/yunarta/'
//
//            licenses {
//                license {
//                    name 'The Apache Software License, Version 2.0'
//                    url 'http://www.apache.org/licenses/LICENSE-2.0'
//                    distribution 'repo'
//                }
//            }
//
//            scm {
//                url "https://github.com/yunarta/works-builder-android.git"
//                connection "scm:git:git@github.com:yunarta/works-builder-android.git"
//                developerConnection "scm:git:git@github.com:yunarta/works-builder-android.git"
//            }
//
//
//            developers {
//                developer {
//                    id 'yunarta'
//                    name 'Yunarta Kartawahyudi'
//                    email 'yunarta.kartawahyudi@gmail.com'
//                    url 'http://sg.linkedin.com/in/yunarta/'
//                    roles {
//                        role 'author'
//                        role 'developer'
//                    }
//                    timezone '+8'
//                }
//            }
//        }
//    }
//}
//
//signing {
//    required { has("release") && gradle.taskGraph.hasTask("uploadArchives") }
//    sign configurations.archives
//}
//
//uploadArchives {
//    if (project.hasProperty('sonatypeUsername')) {
//        repositories {
//            mavenDeployer {
//                beforeDeployment {
//                    MavenDeployment deployment -> signing.signPom(deployment)
//                }
//                pom = generatePom()
//
//                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
//                    authentication(userName: sonatypeUsername, password: sonatypePassword)
//                }
//
//                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
//                    authentication(userName: sonatypeUsername, password: sonatypePassword)
//                }
//            }
//        }
//    }
//    else
//    {
//        def repo = System.getProperty('maven.repo.local')
//        if (!repo) {
//            repo = System.getProperty('HOME') + '/.m2/repository'
//        }
//
//        repositories {
//            mavenDeployer {
//                pom = generatePom()
//                repository(url:new File(repo)) {
//
//                }
//            }
//        }
//    }
//}
//
//android.libraryVariants.all { variant ->
//    if (project.hasProperty('androidSdkDir')) {
//        def name = variant.buildType.name
//        if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
//            return;
//        }
//
//        task("javadoc${variant.name.capitalize()}", type: Javadoc) {
//            description "Generates Javadoc for $variant.name."
//            source = variant.javaCompile.source
//            ext.androidJar = project.androidSdkDir + "/platforms/${android.compileSdkVersion}/android.jar"
//            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
//        }
//
//        task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
//            description "Bundles Javadoc into zip for $variant.name."
//            classifier = "javadoc"
//            from tasks["javadoc${variant.name.capitalize()}"]
//        }
//    }
//}
//
//task sourcesJar(type: Jar) {
//    classifier = 'sources'
//    from android.sourceSets.main.java.srcDirs
//}
//
//task jar(type: Jar) {
//    from 'build/intermediates/classes/release'
//}
//
////task javadocJar(type: Jar, dependsOn: "javadocRelease") {
////    classifier = 'javadoc'
////    from 'build/docs/javadoc'
////}
//
//artifacts {
//    archives sourcesJar
////    archives javadocJar
//    archives jar
//}
